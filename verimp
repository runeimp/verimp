#!/usr/bin/env bash
###################
# VerImp
#
# SemVer (Semantic Versioning) number handling script that can compare common package manager syntax.
# In other words; it supports the syntax used by npm/Bower. Full support for bundler, etc. to come at a later date.
#
# @see [Semantic Versioning]: http://semver.org/
# @see [Semantic versioning and npm | npm Documentation]: https://docs.npmjs.com/getting-started/semantic-versioning
# @see [sindresorhus/semver-regex: Regular expression for matching semver versions]: https://github.com/sindresorhus/semver-regex
#
#####
# Exit Codes:
# -----------
# 0 = The versions are compatible
# 1 = The versions are not compatible
# 2 = Invalid arguments
#
#####
# ChangeLog:
# ----------
# 2016-05-18  0.1.1      Resolving minor bugs.
# 2016-05-11  0.1.0      Finally realized the better way.
# 2016-05-10  0.0.2      Radical logic changes.
# 2016-05-10  0.0.1      Initial script creation.
#
#

APP_AUTHOR_NAME="RuneImp"
APP_AUTHOR_MAIL="runeimp@gmail.com"
APP_NAME="VerImp"
APP_FILE="verimp"
APP_VERSION="0.1.1"
APP_LICENSES="http://opensource.org/licenses/MIT"
APP_LABEL="${APP_AUTHOR_NAME}'s $APP_NAME v$APP_VERSION
License(s): $APP_LICENSES"


#
# CONSTANTS (theoreticaly speaking)
#

# SemVer MMP (Major.Minor.Patch) RegEx
SEMVER_MMP_RE='(([0-9]+)?(\.([0-9]+))?(\.([0-9]+))?)' # RegEx Positions: 1=MMP, 2=Major, 3=Minor, 4=Patch

# SemVer 1.0.0 RegEx with Range Indicator or Version Denotation prefix
SEMVER_1_RE='(^[xXvV~*^]|^)?([0-9xX*]*)(\.([0-9xX*]+))?(\.(xX*|[0-9]+))?(-([^+]*))?([+](.*))?'

# SemVer 2.0.0 RegEx with Range Indicator or Version Denotation prefix
SEMVER_2_RE='(^[vV~^]|^)?([xX*]|[0-9]+)?(\.([xX*]|[0-9]+))?(\.([xX*]|[0-9]+))?([-]([0-9a-zA-Z-]+))?([+](.+))?'

# SEMVER_2_RE with permissive Prerelease delimiter
SEMVER_NORMALIZE_RE='(^[vV~^]|^)?([xX*]|[0-9]+)?(\.([xX*]|[0-9]+))?(\.([xX*]|[0-9]+))?([^+]([0-9a-zA-Z-]+))?([+](.+))?'

# SEMVER_2_RE with permissive tagging
SEMVER_ALL_TAGS_RE='(^[vV~^]|^)?([xX*]|[0-9]+)?(\.([xX*]|[0-9]+))?(\.([xX*]|[0-9]+))?([^+]([^+]+)(\+(.+))?)?'

ONE_OR_TWO_POSITION_VER_RE='^[0-9]+(\.[0-9]+)?$'


#
# VARIABLES
#



#
# FUNCTIONS
#


semver_clean_args()
{
	local clean=''
	local -i major
	local -i minor
	local -i patch

	[[ "$1" = '*' ]] && major=0 || major="$1"
	[[ "$2" = '*' ]] && minor=0 || minor="$2"
	[[ "$3" = '*' ]] && patch=0 || patch="$3"
	clean="${major}.${minor}.${patch}"

	# echo "semver_clean_args() | \$clean: $clean" 1>&2
	printf '%s' "$clean"
}


semver_clean_re()
{
	local -i debug=1

	local clean=''
	local -i major
	local -i minor
	local -i patch
	local temp=''

	if [[ "$1" =~ $SEMVER_MMP_RE ]]; then
		if [[ $debug = 0 ]]; then
			local len=${#BASH_REMATCH[@]}
			let "len -= 1"
			for i in $(seq 1 $len); do
				verimp_error "semver_clean_re() | \${BASH_REMATCH[$i]}: '${BASH_REMATCH[$i]}'"
			done
		fi
		
		temp="${BASH_REMATCH[1]}"
		[[ "x${temp}x" != 'xx' ]] && clean=$temp || clean=0.0.0
		temp="${BASH_REMATCH[2]}"
		[[ "x${temp}x" != 'xx' ]] && major=$temp || major=0
		temp="${BASH_REMATCH[4]}"
		[[ "x${temp}x" != 'xx' ]] && minor=$temp || minor=0
		temp="${BASH_REMATCH[6]}"
		[[ "x${temp}x" != 'xx' ]] && patch=$temp || patch=0

		[[ "$clean" == '0.0.0' ]] && clean="${major}.${minor}.${patch}"

		[[ $debug = 0 ]] && verimp_error "semver_clean_re() | MMP: '${major}.${minor}.${patch}' | clean: $clean"
	fi

	printf '%s' "$clean"
}


semver_normalize_x()
{
	local -i debug=1

	local result="$1"
	local x_zero="${2:-x}"

	case "$1" in
		[xX*] | '')	result="$x_zero"	;;
	esac
	[[ $debug = 0 ]] && verimp_error "$(printf "semver_normalize_x() | input: %-3s | output: %-3s" "'$1'" "'$result'")"

	printf '%s' "$result"
}


semver_ranger()
{
	local -i debug=1

	local range="$1"
	local major="$(semver_normalize_x "$2" "$5")"
	local minor="$(semver_normalize_x "$3" "$5")"
	local patch="$(semver_normalize_x "$4" "$5")"
	local result=''

	[[ $debug -eq 0 ]] && verimp_error "semver_ranger() | \$range: $range | \$major: $major | \$minor: $minor | \$patch: $patch"

	result="${range}${major}.${minor}.${patch}"

	[[ $debug -eq 0 ]] && verimp_error "semver_ranger() | \$result: $result"
	printf '%s' "$result"
}

###
# semver_compare_mmp_mod()
#
# SemVer MMP Comparision based on modifiable position information.
#
# @param	$range_one	Range donotion
# @param	$major_one	1st number major value
# @param	$minor_one	1st number minor value
# @param	$patch_one	1st number patch value
# @param	$major_two	2nd number major value
# @param	$minor_two	2nd number minor value
# @param	$patch_two	2nd number patch value
# @param	$mod_x    	Modifiable position indicator
# @param	$max_x    	Maximum value position indicator
# @param	$max_cap  	Maximum value of $max_x
# @return	digit	0: equality, 1: match, 2: mismatch
#
semver_compare_mmp_mod()
{
	local -i debug=1

	local major_one="$1"; shift
	local minor_one="$1"; shift
	local patch_one="$1"; shift
	local major_two="$1"; shift
	local minor_two="$1"; shift
	local patch_two="$1"; shift
	local mod_x="$1";
	local -i max_cap=0
	local result=2

	if [[ $debug -eq 0 ]]; then
		template_error 'semver_compare_mmp_mod() | mod_x: %-7s' "$range_one" "$mod_x"
		template_error 'semver_compare_mmp_mod() | major_one: %-3s | minor_one: %-3s | patch_one: %-3s' "$major_one" "$minor_one" "$patch_one"
		template_error 'semver_compare_mmp_mod() | major_two: %-3s | minor_two: %-3s | patch_two: %-3s' "$major_two" "$minor_two" "$patch_two"
	fi

	#
	# Testing for a good '0' result
	#
	if [[ "$mod_x" = 'major' ]]; then
		if [[ "$major_one" = 'x' ]]; then
			result=1
		else
			result=2
		fi
	elif [[ "$mod_x" = 'minor' ]]; then
		if [[ $major_one -eq $major_two ]]; then
			if [[ $minor_one -eq $minor_two ]] && [[ "$minor_one" != 'x' ]]; then
				if [[ $patch_one -eq $patch_two ]]; then
					result=0
				elif [[ $patch_one -le $patch_two ]]; then
					result=1
				else
					result=2
				fi
			elif [[ $minor_one -lt $minor_two ]] || [[ "$minor_one" = 'x' ]]; then
				result=1
			else
				result=2
			fi
		fi
	elif [[ "$mod_x" = 'patch' ]]; then
		if [[ $major_one -eq $major_two ]] && [[ $minor_one -eq $minor_two ]]; then
			if [[ $patch_one -eq $patch_two ]] && [[ "$patch_one" != 'x' ]]; then
				result=0
			elif [[ $patch_one -lt $patch_two ]] || [[ "$patch_one" = 'x' ]]; then
				result=1
			else
				result=2
			fi
		fi
	elif [[ "$mod_x" = 'equal' ]]; then
		if [[ $major_one -eq $major_two ]] && [[ $minor_one -eq $minor_two ]] && [[ $patch_one -eq $patch_two ]]; then
			result=0
		else
			result=2
		fi
	else
		template_error 'Unknown value for mod_x: %-7s' "$mod_x"
	fi

	[[ $debug -eq 0 ]] && template_error 'semver_compare_mmp_mod() | mod_x: %-7s | result: %d' "$mod_x" $result

	#
	# Test if good result was for Equality or Match
	#
	if [[ $result -eq 0 ]]; then
		if [[ $major_one -eq $major_two ]] && [[ $minor_one -eq $minor_two ]] || [[ $patch_one -eq $patch_two ]]; then
			result=0
		else
			result=1
		fi
	fi

	[[ $debug -eq 0 ]] &&  verimp_error "semver_compare_mmp_mod() | \$result: $result"

	return $result
}

###
# semver_compare_mmp()
#
# Compares the Major, Minor, and Patch version numbers.
#
# @param	range_one	The range indicator
# @param	major_one	1st version major number
# @param	minor_one	1st version minor number
# @param	patch_one	1st version patch number
# @param	major_two	2nd version major number
# @param	minor_two	2nd version minor number
# @param	patch_two	2nd version patch number
#
# @return	digit	0: equality, 1: match, 2: mismatch
#
semver_compare_mmp()
{
	local -i debug=1

	local -i int_parse
	local range_one="$1"
	local major_one="$2"
	local minor_one="$3"
	local patch_one="$4"
	local -i major_two="$5"
	local -i minor_two="$6"
	local -i patch_two="$7"
	local mod_x=''
	local -i result_code=0

	if [[ $range_one = '~' ]]; then
		# Tilde Range
		#
		# Examples:
		# ~1     allows for >= 1.0.0 < 2.0.0
		# ~1.2   allows for >= 1.2.0 < 1.3.0
		# ~1.2.3 allows for >= 1.2.3 < 1.3.0
		# ~0.1   allows for >= 0.1.0 < 0.2.0
		# ~0.1.2 allows for >= 0.1.2 < 0.2.0
		# ~0.0.1 allows for >= 0.0.1 < 0.1.0
		#
		#
		# mod_x = if minor is >= 0 then minor
		# mod_x = if patch is >= 0 then patch
		#
		# Digit if defined
		#

		mod_x='minor'

		if [[ $minor_one -ge 0 ]] && [[ $minor_one != 'x' ]]; then
			mod_x='patch'
		fi

	elif [[ $range_one = '^' ]]; then
		# Caret Range
		#
		# Examples:
		# ^1     allows for >= 1.0.0 < 2.0.0
		# ^1.2   allows for >= 1.2.0 < 2.0.0
		# ^1.2.3 allows for >= 1.2.3 < 2.0.0
		# ^0.1.2 allows for >= 0.1.2 < 0.2.0
		#
		# mod_x = if major is = 0 then minor
		# mod_x = if mod_x = minor and minor is = 0 then patch
		# mod_x = if mod_x = patch and patch is = 0 then equal
		#
		# Digit not zero
		#

		mod_x='minor'

		if [[ $major_one -eq 0 ]]; then
			mod_x='patch'
			if [[ $minor_one -eq 0 ]] && [[ $minor_one != 'x' ]]; then
				mod_x='equal'
			fi
		fi

	else
		# X-Range & Hyphen Range?
		if [[ "$major_one" = 'x' ]]; then
			mod_x='major'
		elif [[ "$minor_one" = 'x' ]]; then
			mod_x='minor'
		elif [[ "$patch_one" = 'x' ]]; then
			mod_x='patch'
		else
			mod_x='equal'
		fi
	fi

	if [[ $debug = 0 ]]; then
		template_error 'semver_compare_mmp() | range_one: %-2s | mod_x: %-6s' "$range_one" "$mod_x"
		template_error 'semver_compare_mmp() | major_one: %-2s | minor_one: %-2s | patch_one: %-2s' $major_one $minor_one $patch_one
		template_error 'semver_compare_mmp() | major_two: %-2s | minor_two: %-2s | patch_two: %-2s' $major_two $minor_two $patch_two
	fi

	semver_compare_mmp_mod "$major_one" "$minor_one" "$patch_one" "$major_two" "$minor_two" "$patch_two" "$mod_x"
	result_code=$?
	[[ $debug = 0 ]] && verimp_error "semver_compare_mmp() | \$result_code: $result_code"

	return $result_code
}


###
# semver_compare_prerelease()
#
# SemVer Prerelease Tag comparision
#
#
# @param	$prtag_one	1st prerelease tag value
# @param	$prtag_two	2nd prerelease tag value
#
# @return	digit	0: equality, 1: match, 2: mismatch
#
semver_compare_prerelease()
{
	local prtag_one="$1"
	local prtag_two="$2"

	local chunk_one
	local chunk_two
	local -i debug=1
	local -i result=0

	[[ $debug -eq 0 ]] && verimp_error "semver_compare_prerelease() | \$prtag_one: $prtag_one | \$prtag_two: $prtag_two"

	until [[ ${#prtag_one} -eq 0 ]] && [[ ${#prtag_two} -eq 0 ]]; do
		chunk_one="${prtag_one%%.*}"
		chunk_two="${prtag_two%%.*}"

		if [[ ${#chunk_one} = 0 ]] && [[ ${#prtag_one} -gt 0 ]]; then
			chunk_one="$prtag_one"
		else
			prtag_one="${prtag_one#$chunk_one}"
		fi
		if [[ ${#chunk_two} = 0 ]] && [[ ${#prtag_two} -gt 0 ]]; then
			chunk_two="$prtag_two"
		else
			prtag_two="${prtag_two#$chunk_two}"
		fi

		[[ "${prtag_one:0:1}" = '.' ]] && prtag_one="${prtag_one:1}"
		[[ "${prtag_two:0:1}" = '.' ]] && prtag_two="${prtag_two:1}"

		if [[ $debug -eq 0 ]]; then
			template_error "compare_prtag_one() | \$chunk_one: %8s | \$prtag_one: %s\n" "$chunk_one" "$prtag_one"
			template_error "compare_prtag_one() | \$chunk_two: %8s | \$prtag_two: %s\n" "$chunk_two" "$prtag_two"
		fi

		#
		# Empty chunks rate higher than non-empty
		#
		if [[ ! -z "$chunk_one" ]] && [[ -z "$chunk_two" ]]; then
			result=1
		elif [[ -z "$chunk_one" ]] && [[ ! -z "$chunk_two" ]]; then
			result=2
			break
		else
			if [[ "$chunk_one" = "$chunk_two" ]] && [[ $result -eq 0 ]]; then
				result=0
			elif [[ "$chunk_one" < "$chunk_two" ]]; then
				result=1
			else
				result=2
				break
			fi
		fi
		break
	done

	return $result
}


semver_ranged_check()
{
	local -i exit_code=1
	local semver_raw="$1"
	local result=''

	# verimp_error "semver_ranged_check() | \$semver_raw: $semver_raw"

	  if [[ "${semver_raw:0:1}" = '~' ]]; then
		result='~'
		exit_code=0
	elif [[ "${semver_raw:0:1}" = '^' ]]; then
		result='^'
		exit_code=0
	elif [[ "$semver_raw" =~ [xX*] ]]; then
		result='x'
		exit_code=0
	elif [[ "$(semver_clean_re "$semver_raw")" =~ $ONE_OR_TWO_POSITION_VER_RE ]]; then
		result='t'
		exit_code=0
	fi

	echo "$result"
	return $exit_code
}


template_error()
{
	# echo "template_error() | \$1: $1" 1>&2 # Debugging
	echo "  $(printf "$@")" 1>&2
}


verimp::compare()
{
	local -i debug=1

	[[ $debug -eq 0 ]] && verimp_error 'verimp::compare() ...'

	local -i auto_match=1
	local -i comp_match=1
	local -i major_good=1
	local -i minor_good=1
	local -i patch_good=1
	local -i prtag_good=1
	local ver_one="$1"
	local ver_two="$2"

	local -i mmp_result_code=0
	local -i pre_result_code=0
	local result_msg=''
	local result_code=0

	local ver_one_range
	local ver_one_ranged="$(semver_ranged_check "$ver_one")"
	local ver_one_major
	local ver_one_minor
	local ver_one_patch
	local ver_one_mmp
	local ver_one_prtag
	local ver_one_build

	local ver_two_clean="$(semver_clean_re "$2")"
	local ver_two_range
	local ver_two_ranged="$(semver_ranged_check "$ver_two")"
	local ver_two_major
	local ver_two_minor
	local ver_two_patch
	local ver_two_mmp
	local ver_two_prtag
	local ver_two_build

	[[ $debug -eq 0 ]] && verimp_error "verimp::compare() | \$ver_two: '$ver_two' | \$ver_two_clean: '$ver_two_clean'"
	[[ $debug -eq 0 ]] && verimp_error "verimp::compare() | \$ver_one_ranged: '$ver_one_ranged' | \$ver_two_ranged: '$ver_two_ranged'"


	if [[ "$ver_one_ranged" = '' ]] && [[ "$ver_two_ranged" != '' ]]; then
		[[ $debug -eq 0 ]] && verimp_error "verimp::compare() | \$ver_two: $ver_two == ranged"
		ver_tmp="$ver_one"
		ver_one="$ver_two"
		ver_two="$ver_tmp"

		var_tmp="$ver_one_ranged"
		ver_one_ranged="$ver_two_ranged"
		ver_two_ranged="$ver_tmp"
	fi

	ver_one="$(verimp::normalize "$ver_one")"
	ver_two="$(verimp::normalize "$ver_two" 0)"

	if [[ "$ver_one" =~ $SEMVER_NORMALIZE_RE ]]; then
		ver_one_range="${BASH_REMATCH[1]}"  # SemVer Version denotation (v or V) or Range indicator (~ or ^). Optional
		ver_one_major="${BASH_REMATCH[2]}"  # SemVer MMP Major Version. Mandatory
		ver_one_minor="${BASH_REMATCH[4]}"  # SemVer MMP Minor Version. Mandatory
		ver_one_patch="${BASH_REMATCH[6]}"  # SemVer MMP Patch Version. Mandatory
		ver_one_mmp="${BASH_REMATCH[2]}.${BASH_REMATCH[4]}.${BASH_REMATCH[6]}" # SemVer MMP Version. Mandatory
		ver_one_prtag="${BASH_REMATCH[8]}"  # SemVer 2.0.0 Prerelease Tag. Optional
		ver_one_build="${BASH_REMATCH[10]}" # SemVer 2.0.0 Build. Ignore when comparing. Optional
	fi
	[[ $debug -eq 0 ]] && template_error 'verimp::compare() | $ver_one | range: %1s | MMP: %-8s | prerelease: %-5s | build: %s' "$ver_one_range" "$ver_one_mmp" "$ver_one_prtag" "$ver_one_build"

	if [[ "$ver_two" =~ $SEMVER_NORMALIZE_RE ]]; then
		ver_two_range="${BASH_REMATCH[1]}"  # SemVer Version denotation (v or V) or Range indicator (~ or ^). Optional
		ver_two_major="${BASH_REMATCH[2]}"  # SemVer MMP Major Version. Mandatory
		ver_two_minor="${BASH_REMATCH[4]}"  # SemVer MMP Minor Version. Mandatory
		ver_two_patch="${BASH_REMATCH[6]}"  # SemVer MMP Patch Version. Mandatory
		ver_two_mmp="${BASH_REMATCH[2]}.${BASH_REMATCH[4]}.${BASH_REMATCH[6]}" # SemVer MMP Version. Mandatory
		ver_two_prtag="${BASH_REMATCH[8]}"  # SemVer 2.0.0 Prerelease Tag. Optional
		ver_two_build="${BASH_REMATCH[10]}" # SemVer 2.0.0 Build. Ignore when comparing. Optional
	fi
	[[ $debug -eq 0 ]] && template_error 'verimp::compare() | $ver_two | range: %1s | MMP: %-8s | prerelease: %-5s | build: %s' "$ver_two_range" "$ver_two_mmp" "$ver_two_prtag" "$ver_two_build"

	semver_compare_mmp "$ver_one_range" "$ver_one_major" "$ver_one_minor" "$ver_one_patch" "$ver_two_major" "$ver_two_minor" "$ver_two_patch"
	mmp_result_code=$?

	semver_compare_prerelease "$ver_one_prtag" "$ver_two_prtag"
	pre_result_code=$?

	[[ $debug -eq 0 ]] && verimp_error "verimp::compare() | \$mmp_result_code: $mmp_result_code | \$pre_result_code: $pre_result_code | \$ver_one_prtag: $ver_one_prtag | \$ver_two_prtag: $ver_two_prtag"

	if [[ $mmp_result_code -eq 0 ]] && [[ $pre_result_code -lt 2 ]]; then
		result_code=0
	elif [[ $mmp_result_code -eq 1 ]] && [[ "x${ver_two_prtag}x" = 'xx' ]]; then
		result_code=0
	else
		result_code=1
	fi

	if [[ $result_code -eq 0 ]]; then
		result_msg="Good Match $ver_one :: $ver_two"
	else
		result_msg="Bad Match $ver_one :: $ver_two"
	fi

	[[ $debug -eq 0 ]] && verimp_error "verimp::compare() | \$result_msg: '$result_msg' | \$result_code: $result_code"
	echo "$result_msg"
	return $result_code
}


verimp::normalize()
{
	local -i debug=1

	local build
	local major
	local minor
	local patch
	local prtag
	local range=''
	local ranged=''
	local result=''
	local input="$1"
	local x_zero="${2:-x}"

	[[ $debug -eq 0 ]] && verimp_error "verimp::normalize() | \$input: $input"

	if [[ "$input" =~ $SEMVER_NORMALIZE_RE ]]; then
		range="${BASH_REMATCH[1]}"  # SemVer Version denotation (v or V) or Range indicator (~ or ^). Optional
		major="${BASH_REMATCH[2]}"  # SemVer MMP Major Version. Mandatory
		minor="${BASH_REMATCH[4]}"  # SemVer MMP Minor Version. Mandatory
		patch="${BASH_REMATCH[6]}"  # SemVer MMP Patch Version. Mandatory
		prtag="${BASH_REMATCH[8]}"  # SemVer 2.0.0 Prerelease Tag. Optional
		build="${BASH_REMATCH[10]}" # SemVer 2.0.0 Build. Ignore when comparing. Optional

		ranged="$(semver_ranger "$range" "$major" "$minor" "$patch" "$x_zero")"
	fi

	[[ $debug -eq 0 ]] && verimp_error "verimp::normalize() | \$input: $input | \$ranged: $ranged"

	[[ $debug -eq 0 ]] && verimp_error "verimp::normalize() INPUT | \$input: $input"
	[[ $debug -eq 0 ]] && verimp_error "verimp::normalize() | \$major: $major | \$minor: $minor | \$patch: $patch | \$prtag: $prtag | \$build: $build"
	
	result="${ranged}"
	[[ "x${prtag}x" != 'xx' ]] && result="${result}-${prtag}"
	[[ "x${build}x" != 'xx' ]] && result="${result}+${build}"

	[[ $debug -eq 0 ]] && verimp_error "verimp::normalize() | \$input: $input | \$ranged: $ranged | \$result: $result"
	[[ $debug -eq 0 ]] && verimp_error "$(printf 'verimp::normalize() | $input: %-8s | $ranged: %-8s | $result: %-8s\n' $input $ranged $result)"

	printf '%s' "$result"
}


verimp_error()
{
	echo "  $1" 1>&2
	if [[ "x$2" != "x" ]]; then
		exit $2
	fi
}


if [[ $# -eq 0 ]]; then
	echo "  Usage: $APP_FILE ~1.2.3 1.2" 1>&2
	exit 2
elif [[ $# -eq 2 ]]; then
	case "$1" in
		normalize)
			result_msg="$(verimp::normalize "$2")"
			result_code=$?
			echo "$result_msg"
			exit $result_code
			;;
		clean)
			result_msg="$(semver_clean_re "$2")"
			result_code=$?
			echo "$result_msg"
			exit $result_code
			;;
		*)
			result_msg="$(verimp::compare "$1" "$2")"
			result_code=$?
			echo "$result_msg"
			exit $result_code
			;;
	esac
else
	case "$1" in
		-h | -help | --help)
			echo "  Usage: $APP_FILE ~1.2.3 1.2"
			exit 0
			;;
		*)
			echo "  Unknown command: $1"
			exit 2
			;;
	esac
fi
